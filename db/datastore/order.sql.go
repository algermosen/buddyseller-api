// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: order.sql

package datastore

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const cancelOrder = `-- name: CancelOrder :exec
UPDATE orders
SET status = 'cancelled',
    cancelled = NOW (),
    cancellation_reason = $2
WHERE id = $1
`

type CancelOrderParams struct {
	ID                 int32
	CancellationReason pgtype.Text
}

func (q *Queries) CancelOrder(ctx context.Context, arg CancelOrderParams) error {
	_, err := q.db.Exec(ctx, cancelOrder, arg.ID, arg.CancellationReason)
	return err
}

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders(total_amount, tax, user_id, client_name, client_email, client_phone, note)
VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING id
`

type CreateOrderParams struct {
	TotalAmount pgtype.Numeric
	Tax         pgtype.Numeric
	UserID      int32
	ClientName  pgtype.Text
	ClientEmail pgtype.Text
	ClientPhone pgtype.Text
	Note        pgtype.Text
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (int32, error) {
	row := q.db.QueryRow(ctx, createOrder,
		arg.TotalAmount,
		arg.Tax,
		arg.UserID,
		arg.ClientName,
		arg.ClientEmail,
		arg.ClientPhone,
		arg.Note,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

type CreateOrderItemsParams struct {
	UnitPrice pgtype.Numeric
	ProductID int32
	Quantity  int32
	OrderID   int32
}

const getOrder = `-- name: GetOrder :one
SELECT id, status, total_amount, tax, user_id, created, shipped, cancelled, delivered, client_name, client_email, client_phone, note, cancellation_reason FROM orders WHERE id = $1
`

func (q *Queries) GetOrder(ctx context.Context, id int32) (Order, error) {
	row := q.db.QueryRow(ctx, getOrder, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.Status,
		&i.TotalAmount,
		&i.Tax,
		&i.UserID,
		&i.Created,
		&i.Shipped,
		&i.Cancelled,
		&i.Delivered,
		&i.ClientName,
		&i.ClientEmail,
		&i.ClientPhone,
		&i.Note,
		&i.CancellationReason,
	)
	return i, err
}

const getOrderItemsDetail = `-- name: GetOrderItemsDetail :many
SELECT p.name, oi.unit_price, oi.quantity FROM order_items oi
JOIN products p ON oi.product_id = p.id
WHERE oi.order_id = $1
`

type GetOrderItemsDetailRow struct {
	Name      string
	UnitPrice pgtype.Numeric
	Quantity  int32
}

func (q *Queries) GetOrderItemsDetail(ctx context.Context, orderID int32) ([]GetOrderItemsDetailRow, error) {
	rows, err := q.db.Query(ctx, getOrderItemsDetail, orderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetOrderItemsDetailRow
	for rows.Next() {
		var i GetOrderItemsDetailRow
		if err := rows.Scan(&i.Name, &i.UnitPrice, &i.Quantity); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listOrders = `-- name: ListOrders :many
SELECT id, status, total_amount, tax, user_id, created, shipped, cancelled, delivered, client_name, client_email, client_phone, note, cancellation_reason FROM orders
`

func (q *Queries) ListOrders(ctx context.Context) ([]Order, error) {
	rows, err := q.db.Query(ctx, listOrders)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.Status,
			&i.TotalAmount,
			&i.Tax,
			&i.UserID,
			&i.Created,
			&i.Shipped,
			&i.Cancelled,
			&i.Delivered,
			&i.ClientName,
			&i.ClientEmail,
			&i.ClientPhone,
			&i.Note,
			&i.CancellationReason,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrderStatus = `-- name: UpdateOrderStatus :exec
UPDATE orders
SET status = $2::order_status,
    shipped = CASE
        WHEN $2::order_status = 'shipped' THEN NOW () ELSE shipped END,
    delivered = CASE
        WHEN $2::order_status = 'delivered' THEN NOW () ELSE delivered END,
    cancelled = CASE
        WHEN $2::order_status = 'cancelled' THEN NOW () ELSE cancelled END
WHERE id = $1
`

type UpdateOrderStatusParams struct {
	ID      int32
	Column2 OrderStatus
}

func (q *Queries) UpdateOrderStatus(ctx context.Context, arg UpdateOrderStatusParams) error {
	_, err := q.db.Exec(ctx, updateOrderStatus, arg.ID, arg.Column2)
	return err
}
