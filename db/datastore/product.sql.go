// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: product.sql

package datastore

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO products(name, description, sku, price, stock)
VALUES ($1, $2, $3, $4, $5) RETURNING id
`

type CreateProductParams struct {
	Name        string
	Description string
	Sku         string
	Price       pgtype.Numeric
	Stock       int32
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (int32, error) {
	row := q.db.QueryRow(ctx, createProduct,
		arg.Name,
		arg.Description,
		arg.Sku,
		arg.Price,
		arg.Stock,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteProduct = `-- name: DeleteProduct :execrows
DELETE FROM products
	WHERE id = $1
`

func (q *Queries) DeleteProduct(ctx context.Context, id int32) (int64, error) {
	result, err := q.db.Exec(ctx, deleteProduct, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getProductById = `-- name: GetProductById :one
SELECT id, name, description, sku, price, stock FROM products 
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetProductById(ctx context.Context, id int32) (Product, error) {
	row := q.db.QueryRow(ctx, getProductById, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Sku,
		&i.Price,
		&i.Stock,
	)
	return i, err
}

const getProductBySku = `-- name: GetProductBySku :one
SELECT id, name, description, sku, price, stock FROM products 
WHERE sku = $1
LIMIT 1
`

func (q *Queries) GetProductBySku(ctx context.Context, sku string) (Product, error) {
	row := q.db.QueryRow(ctx, getProductBySku, sku)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Sku,
		&i.Price,
		&i.Stock,
	)
	return i, err
}

const listProducts = `-- name: ListProducts :many
SELECT id, name, description, sku, price, stock FROM products
`

func (q *Queries) ListProducts(ctx context.Context) ([]Product, error) {
	rows, err := q.db.Query(ctx, listProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Sku,
			&i.Price,
			&i.Stock,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProductsToOrder = `-- name: ListProductsToOrder :many
SELECT id, price, stock FROM products
WHERE id = ANY($1::int[])
`

type ListProductsToOrderRow struct {
	ID    int32
	Price pgtype.Numeric
	Stock int32
}

func (q *Queries) ListProductsToOrder(ctx context.Context, dollar_1 []int32) ([]ListProductsToOrderRow, error) {
	rows, err := q.db.Query(ctx, listProductsToOrder, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListProductsToOrderRow
	for rows.Next() {
		var i ListProductsToOrderRow
		if err := rows.Scan(&i.ID, &i.Price, &i.Stock); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :execrows
UPDATE products
	SET 
		name = $2,
		description = $3,
		sku = $4,
		price = $5,
		stock = $6
	WHERE id = $1
`

type UpdateProductParams struct {
	ID          int32
	Name        string
	Description string
	Sku         string
	Price       pgtype.Numeric
	Stock       int32
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (int64, error) {
	result, err := q.db.Exec(ctx, updateProduct,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Sku,
		arg.Price,
		arg.Stock,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const updateStock = `-- name: UpdateStock :exec
UPDATE products
	SET 
		stock = $2
	WHERE id = $1
`

type UpdateStockParams struct {
	ID    int32
	Stock int32
}

func (q *Queries) UpdateStock(ctx context.Context, arg UpdateStockParams) error {
	_, err := q.db.Exec(ctx, updateStock, arg.ID, arg.Stock)
	return err
}
