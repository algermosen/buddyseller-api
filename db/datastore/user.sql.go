// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user.sql

package datastore

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users(name, code, email, password)
VALUES ($1, $2, $3, $4) RETURNING id
`

type CreateUserParams struct {
	Name     string
	Code     string
	Email    string
	Password string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (int32, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Name,
		arg.Code,
		arg.Email,
		arg.Password,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, name, code, email, password FROM users
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Code,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const getUserCredentials = `-- name: GetUserCredentials :one
SELECT id, email, password FROM users
WHERE code = $1
`

type GetUserCredentialsRow struct {
	ID       int32
	Email    string
	Password string
}

func (q *Queries) GetUserCredentials(ctx context.Context, code string) (GetUserCredentialsRow, error) {
	row := q.db.QueryRow(ctx, getUserCredentials, code)
	var i GetUserCredentialsRow
	err := row.Scan(&i.ID, &i.Email, &i.Password)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, name, code, email, password FROM users
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Code,
			&i.Email,
			&i.Password,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePassword = `-- name: UpdatePassword :exec
UPDATE users
SET 
    password = $2
WHERE id = $1
`

type UpdatePasswordParams struct {
	ID       int32
	Password string
}

func (q *Queries) UpdatePassword(ctx context.Context, arg UpdatePasswordParams) error {
	_, err := q.db.Exec(ctx, updatePassword, arg.ID, arg.Password)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET 
    name = $2,
    code = $3,
    email = $4
WHERE id = $1
`

type UpdateUserParams struct {
	ID    int32
	Name  string
	Code  string
	Email string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser,
		arg.ID,
		arg.Name,
		arg.Code,
		arg.Email,
	)
	return err
}
